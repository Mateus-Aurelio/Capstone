#pragma kernel ProcessCube
# include "/MarchingCubesData.compute"

struct Vertex { 
	float3 position;
	// float3 normal;
	// int2 id;
};

struct Triangle {
	Vertex vertexC;
	Vertex vertexB;
	Vertex vertexA;
};

Vertex createVertex(int3 coordA, int3 coordB) {
	
	float3 posA = coordA;
	float3 posB = coordB;
	/*float densityA = sampleDensity(coordA);
	float densityB = sampleDensity(coordB);

	// Interpolate between the two corner points based on the density
	float t = (isoLevel - densityA) / (densityB - densityA);
	float3 position = posA + t * (posB - posA);*/
    float3 position = posA + 0.5f * (posB - posA);

	// Normal:
	/*float3 normalA = calculateNormal(coordA);
	float3 normalB = calculateNormal(coordB);
	float3 normal = normalize(normalA + t * (normalB - normalA));*/

	// ID
	// int indexA = indexFromCoord(coordA);
	// int indexB = indexFromCoord(coordB);

	// Create vertex
	Vertex vertex;
	vertex.position = position;
	// vertex.normal = normal;
	// vertex.id = int2(min(indexA, indexB), max(indexA, indexB));

	return vertex;
}


AppendStructuredBuffer<Triangle> triangles;










Texture3D<float> worldPoints;

int3 size;
float pointsPerUnit;
// bool worldPoints[size.x][size.y][size.z];
// bool worldPoints[1][1][1];



[numthreads(8,8,8)]
void ProcessCube (int3 id : SV_DispatchThreadID)
{   
    if (id.x >= size.x || id.y >= size.y || id.z >= size.z) {
		return;
	}

	int3 coord = id;

	// Calculate coordinates of each corner of the current cube
	int3 cornerCoords[8];
	cornerCoords[0] = coord + int3(0, 0, 0);
	cornerCoords[1] = coord + int3(1, 0, 0);
	cornerCoords[2] = coord + int3(1, 0, 1);
	cornerCoords[3] = coord + int3(0, 0, 1);
	cornerCoords[4] = coord + int3(0, 1, 0);
	cornerCoords[5] = coord + int3(1, 1, 0);
	cornerCoords[6] = coord + int3(1, 1, 1);
	cornerCoords[7] = coord + int3(0, 1, 1);

	// Calculate unique index for each cube configuration.
	// There are 256 possible values (cube has 8 corners, so 2^8 possibilites).
	// A value of 0 means cube is entirely inside the surface; 255 entirely outside.
	// The value is used to look up the edge table, which indicates which edges of the cube the surface passes through.
	int cubeConfiguration = 0;
	for (int i = 0; i < 8; i ++) {
		// if (worldPoints[coord.x][coord.y][coord.z]) cubeConfiguration |= (1 << 1);
		// cubeConfiguration |= (1 << (worldPoints[coord] > 0));

		cubeConfiguration |= (worldPoints[cornerCoords[i]] > 0) ? (1 << i) : 0;
		// cubeConfiguration |= (1 << (worldPoints[cornerCoords[i]] > 0));
	}
	
	// Get array of the edges of the cube that the surface passes through.
	int edgeIndices[] = triangulation[cubeConfiguration];

	// Create triangles for the current cube configuration
	for (i = 0; i < 16; i += 3) {
		// If edge index is -1, then no further vertices exist in this configuration
		if (edgeIndices[i] == -1) { break; }

		// Get indices of the two corner points defining the edge that the surface passes through.
		// (Do this for each of the three edges we're currently looking at).
		int edgeIndexA = edgeIndices[i];
		int a0 = cornerIndexAFromEdge[edgeIndexA];
		int a1 = cornerIndexBFromEdge[edgeIndexA];

		int edgeIndexB = edgeIndices[i+1];
		int b0 = cornerIndexAFromEdge[edgeIndexB];
		int b1 = cornerIndexBFromEdge[edgeIndexB];

		int edgeIndexC = edgeIndices[i+2];
		int c0 = cornerIndexAFromEdge[edgeIndexC];
		int c1 = cornerIndexBFromEdge[edgeIndexC];

		// Calculate positions of each vertex.
		Vertex vertexA = createVertex(cornerCoords[a0] / pointsPerUnit, cornerCoords[a1] / pointsPerUnit);
		Vertex vertexB = createVertex(cornerCoords[b0] / pointsPerUnit, cornerCoords[b1] / pointsPerUnit);
		Vertex vertexC = createVertex(cornerCoords[c0] / pointsPerUnit, cornerCoords[c1] / pointsPerUnit);

		// Create triangle
		Triangle tri;
		tri.vertexA = vertexC;
		tri.vertexB = vertexB;
		tri.vertexC = vertexA;
		triangles.Append(tri);
	}
}


















